# include <stdio.h>
# include <stdlib.h>
# include <math.h>
char* encode(int n, char* msg){
    int count;
    
    char *new = malloc(8*n+1);
    for(count=0;count<8*n;count++){
        new[count] = '0';
        }
    new[8*n] = '\0';
    count = 0;
    for(count=0; count<n; count++){    
        char character = msg[count];
        int charint, k = (8*(count+1))-1;
        if(character == ' ') charint = 32;
        else charint = character;
        
        while(charint!=1){
            if(charint%2==1){
                new[k] = '1';
                k = k-1;
                charint = charint/2;
                }
            else{
                new[k] = '0';
                k = k-1;
                charint = charint/2;
                }
            }
        new[k] = '1';
        }
    return new;
    }



    
char* decode(int n, char* bitsq){
    int i,k,count,sum;
    char character;
    char *new = malloc((n/8)+1);
    new[n/8] = '\0';
    count = 0;
    for(i=0;i<n;i = i+8){
        sum = 0;
        for(k=7;k>=0;k=k-1){
            if(bitsq[i+k]=='1'){
                sum += (int)pow(2, 7-k);
                }
            }
        character = sum; 
        new[count] = (char)character;
        count++;
        }

        return new;
    }



int main(){
    char type;
    int length;
    scanf("%c ", &type);
    scanf("%d ", &length);
    if(type=='P'){
        char message[1000];
        scanf("\n");
        scanf("%[^\n]%*c", message);
        printf("%s", encode(length, message));
        }
    else if(type=='C'){
        char message[10000]; 
        scanf("\n");
        scanf("%[^\n]%*c", message);
        printf("%s", decode(length, message));
        }
    else return 0;
    }
